(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@svgdotjs/svg.js", "./aiReinforcementLearningModule"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SVG = require("@svgdotjs/svg.js");
    var aiqlearning = require("./aiReinforcementLearningModule");
    var svg = SVG.SVG().addTo('body').size(300, 300);
    var rect = svg.rect(100, 100).attr({ fill: '#f06' });
    var updateBackground = function () {
        console.log("Hallo");
    };
    var qLearningAlgorithmModule = new aiqlearning.QLearningAlgorithmModule(updateBackground);
    var qLearningParams = {
        alpha: 0.9,
        episodes: 150,
        finishNode: 7,
        gamma: 0.5,
        nu: 0.5,
        rho: 0.6,
        startNode: 0,
        timePerEpisode: 500,
        updateBackground: updateBackground,
        obstaclesList: []
    };
    function createQLearningEnvironment(obstaclesList, startNode, finishNode) {
        return qLearningAlgorithmModule.createQLearningEnvironment(obstaclesList, startNode, finishNode);
    }
    function setUpQLearningBehaviour(alpha, gamma, nu, rho) {
        qLearningAlgorithmModule.setUpQLearningBehaviour(alpha, gamma, nu, rho);
    }
    function runQLearner() {
        return qLearningAlgorithmModule.runQLearner();
    }
    function drawOptimalPath() {
        qLearningAlgorithmModule.drawOptimalPath();
    }
    createQLearningEnvironment(qLearningParams.obstaclesList, qLearningParams.startNode, qLearningParams.finishNode);
    setUpQLearningBehaviour(qLearningParams.alpha, qLearningParams.gamma, qLearningParams.nu, qLearningParams.rho);
    runQLearner();
    drawOptimalPath();
});
