var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./timerImpl"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var timerImpl_1 = require("./timerImpl");
    var PlayerImpl = /** @class */ (function (_super) {
        __extends(PlayerImpl, _super);
        function PlayerImpl(qLearningSteps, totalTime, totalNumberOfEpisodes, startFinishStates) {
            var _this = _super.call(this) || this;
            _this.qLearningSteps = qLearningSteps;
            _this.totalTime = totalTime;
            _this.totalNumberOfEpisodes = totalNumberOfEpisodes;
            _this.startState = startFinishStates.startState;
            _this.finishState = startFinishStates.finishState;
            _this.timer = new timerImpl_1.TimerImpl(0, totalTime);
            _this.timer.addEventListener("tick", function (e) {
                return _this.onTimerTick(e.detail.time, e.detail.executionDuration);
            });
            return _this;
        }
        PlayerImpl.prototype.onTimerTick = function (currentTime, executionDuration) {
            console.log("Tick " + currentTime);
            this.currentEpisodeNumber++;
            var newQlearnerStep = this.qLearningSteps[this.currentEpisodeNumber];
            this.visualizer.onQLearningStep(newQlearnerStep, currentTime, executionDuration);
        };
        PlayerImpl.prototype.initialize = function (visualizer) {
            this.currentEpisodeNumber = -1;
            this.visualizer = visualizer;
            var that = this;
            this.visualizer.setInitialValuesOnMap(this.startState.id, this.finishState.id, this.totalTime, this.qLearningSteps.length);
            this.visualizer.addEventListener("playerStarted", function (e) {
                that.play(e.detail);
            });
            this.visualizer.addEventListener("playerStopped", function () {
                that.stop();
            });
            this.visualizer.addEventListener("playerPaused", function () {
                that.pause();
            });
            this.visualizer.addEventListener("playerStartedForOneStep", function (e) {
                that.startForOneStep(e.detail);
            });
        };
        PlayerImpl.prototype.play = function (speed) {
            this.timer.play(speed);
        };
        PlayerImpl.prototype.stop = function () {
            this.timer.stop();
        };
        PlayerImpl.prototype.pause = function () {
            this.timer.pause();
        };
        PlayerImpl.prototype.startForOneStep = function (speed) {
            this.timer.playOneTick(speed);
        };
        return PlayerImpl;
    }(EventTarget));
    exports.PlayerImpl = PlayerImpl;
});
