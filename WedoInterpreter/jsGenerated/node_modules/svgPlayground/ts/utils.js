(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "svgdotjs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var svgdotjs_1 = require("svgdotjs");
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.file_get_contents = function (uri) {
            return fetch(uri).then(function (res) { return res.text(); });
        };
        Utils.convertObstacleListToActionList = function (obstacleList) {
            var actionsList = new Array();
            for (var _i = 0, obstacleList_1 = obstacleList; _i < obstacleList_1.length; _i++) {
                var obstacle = obstacleList_1[_i];
                actionsList.push(Utils.convertStartFinishNodeToAction(obstacle.startNode, obstacle.finishNode));
            }
            return actionsList;
        };
        Utils.convertStartFinishNodeToAction = function (startNode, finishNode) {
            return {
                startState: { id: startNode },
                finishState: { id: finishNode }
            };
        };
        Utils.convertNumberToSeconds = function (totalTime) {
            var hours = Math.floor(totalTime / 60 / 60);
            var minutes = Math.floor(totalTime / 60) % 60;
            var seconds = totalTime % 60;
            var separator = " : ";
            return Utils.normalizeTimeOutput(hours) + separator
                + Utils.normalizeTimeOutput(minutes) + separator
                + Utils.normalizeTimeOutput(seconds);
        };
        Utils.normalizeTimeOutput = function (timeValue) {
            if (timeValue < 0) {
                return "" + timeValue;
            }
            return (timeValue < 10 ? "0" : "") + timeValue;
        };
        Utils.filterOutNotAllowedActions = function (allActions, notAllowedActions) {
            var filtered = allActions.filter(function (el) {
                return !notAllowedActions.some(function (f) {
                    return f.startState.id === el.startState.id && f.finishState.id === el.finishState.id;
                });
            });
            return filtered;
        };
        Utils.calcShapeLength = function (shape) {
            switch (shape.constructor) {
                case svgdotjs_1.Line:
                    return Utils.dist(shape.attr("x1"), shape.attr("x2"), shape.attr("y1"), shape.attr("y2"));
                case svgdotjs_1.Path:
                    return shape.length();
                case svgdotjs_1.Polyline:
                default: 0;
            }
        };
        Utils.dist = function (x1, x2, y1, y2) {
            return Math.sqrt((x2 -= x1) * x2 + (y2 -= y1) * y2);
        };
        return Utils;
    }());
    exports.Utils = Utils;
});
