var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./models"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var models_1 = require("./models");
    var TimerImpl = /** @class */ (function (_super) {
        __extends(TimerImpl, _super);
        function TimerImpl(speed, time) {
            var _this = _super.call(this) || this;
            _this._runningState = models_1.RunningState.STOP;
            _this._speed = speed;
            _this._time = time;
            _this.isRunning = false;
            return _this;
        }
        TimerImpl.prototype.callTick = function (force) {
            var that = this;
            if (this.isRunning && !force) {
                return;
            }
            this.isRunning = true;
            this.tick();
            this.interval = setTimeout(function () {
                if (that._runningState == models_1.RunningState.PLAY) {
                    that.callTick(true);
                }
                else {
                    that.isRunning = false;
                }
            }, 1000 / that._speed);
        };
        TimerImpl.prototype.tick = function () {
            if (this._time > 0) {
                this._time--;
                console.log("tick " + this._time);
                this.createAndDispatchEvent("tick");
            }
            else {
                this.stop();
            }
        };
        TimerImpl.prototype.stop = function () {
            if (this.updateRunningState(models_1.RunningState.STOP)) {
                this._time = 0;
                this.createAndDispatchEvent("stop");
            }
        };
        TimerImpl.prototype.pause = function () {
            if (this.updateRunningState(models_1.RunningState.PAUSE)) {
                this.createAndDispatchEvent("pause");
            }
        };
        TimerImpl.prototype.playOneTick = function (speed) {
            this.play(speed);
            this.pause();
        };
        TimerImpl.prototype.play = function (speed) {
            var previousSpeed = this._speed;
            if (previousSpeed != speed) {
                this._speed = speed;
                console.log("Update speed " + previousSpeed + " > " + speed);
            }
            if (this.updateRunningState(models_1.RunningState.PLAY)) {
                this.callTick();
                this.createAndDispatchEvent("play");
            }
        };
        TimerImpl.prototype.updateRunningState = function (runningState) {
            var previousState = this._runningState;
            if (this._runningState == runningState) {
                console.log(this._runningState + " is already active.");
                return false;
            }
            this._runningState = runningState;
            console.log("Updated state " + models_1.RunningState[previousState] + " > " + models_1.RunningState[runningState] + ".");
            return true;
        };
        TimerImpl.prototype.createAndDispatchEvent = function (typeArg) {
            this.dispatchEvent(new CustomEvent(typeArg, {
                detail: {
                    'time': this.time,
                    'executionDuration': 1000 / this._speed
                }
            }));
        };
        Object.defineProperty(TimerImpl.prototype, "runningState", {
            get: function () {
                return this._runningState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimerImpl.prototype, "speed", {
            get: function () {
                return this._speed;
            },
            set: function (value) {
                this._speed = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimerImpl.prototype, "time", {
            get: function () {
                return this._time;
            },
            enumerable: true,
            configurable: true
        });
        return TimerImpl;
    }(EventTarget));
    exports.TimerImpl = TimerImpl;
});
